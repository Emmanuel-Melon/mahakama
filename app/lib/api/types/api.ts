/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user (v1)
     * @description Creates a new user account and returns an authentication token.
     *
     *     **Note:** Password must be at least 8 characters long.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            password: string;
            name?: string;
          };
        };
      };
      responses: {
        /** @description User registered successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["AuthResponse"];
          };
        };
        /** @description Bad request (e.g., invalid input, user already exists) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Authenticate a user (v1)
     * @description Authenticates a user and returns a JWT token for accessing protected routes.
     *
     *     **Note:** The token should be included in the `Authorization` header for subsequent requests.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Authentication successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["AuthResponse"];
          };
        };
        /** @description Invalid credentials */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/chats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's chats
     * @description Returns a list of chats for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of user's chats */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Chat"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new chat
     * @description Creates a new chat session
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateChatRequest"];
        };
      };
      responses: {
        /** @description Chat created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Chat"];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/chats/{chatId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get chat by ID
     * @description Returns a specific chat by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the chat to retrieve */
          chatId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Chat details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Chat"];
          };
        };
        /** @description Chat not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/chats/{chatId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get chat messages
     * @description Retrieve messages for a specific chat
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the chat to get messages from */
          chatId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of messages in the chat */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Message"][];
          };
        };
        /** @description Chat not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    /**
     * Send a message
     * @description Send a new message to a chat
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the chat to send message to */
          chatId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SendMessageRequest"];
        };
      };
      responses: {
        /** @description Message sent successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
        /** @description Invalid input or chat not found */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all users
     * @description Returns a list of all registered users (admin only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter users by role */
          role?: "user" | "admin" | "lawyer";
          /** @description Filter by active status */
          isActive?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Forbidden - Admin access required */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new user
     * @description Register a new user account
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserRequest"];
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Email already in use */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user by ID
     * @description Retrieve user details by user ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Forbidden - Not authorized to view this user */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/questions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all questions
     * @description Retrieve a list of questions with optional filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter questions by status */
          status?: "pending" | "processing" | "answered" | "closed";
          /** @description Filter questions by legal category */
          category?: string;
          /** @description Filter questions by user ID */
          userId?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of questions */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Question"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new legal question
     * @description Submit a new legal question to the system
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateQuestionRequest"];
        };
      };
      responses: {
        /** @description Question created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Question"];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/questions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a specific question
     * @description Retrieve details of a specific question by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Question's unique identifier */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Question details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Question"];
          };
        };
        /** @description Question not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/questions/{id}/process": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Process a question
     * @description Assign a lawyer to process and answer a question
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Question's unique identifier */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProcessQuestionRequest"];
        };
      };
      responses: {
        /** @description Question processing started */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Question"];
          };
        };
        /** @description Invalid input or question cannot be processed */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Question not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/lawyers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all lawyers
     * @description Returns a list of all registered lawyers with optional filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter lawyers by specialization */
          specialization?: string;
          /** @description Minimum years of experience */
          minExperience?: number;
          /** @description Filter by language spoken */
          language?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of lawyers */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Lawyer"][];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new lawyer profile
     * @description Register a new lawyer in the system
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateLawyerRequest"];
        };
      };
      responses: {
        /** @description Lawyer created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Lawyer"];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Lawyer with this email or bar number already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/lawyers/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get lawyer by ID
     * @description Returns a single lawyer by their unique identifier
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Lawyer's unique identifier */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Lawyer details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Lawyer"];
          };
        };
        /** @description Lawyer not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Update lawyer profile
     * @description Update an existing lawyer's information
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Lawyer's unique identifier */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateLawyerRequest"];
        };
      };
      responses: {
        /** @description Lawyer updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Lawyer"];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Lawyer not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/lawyers/email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get lawyer by email
     * @description Returns a single lawyer by their email address
     */
    get: {
      parameters: {
        query: {
          /** @description Lawyer's email address */
          email: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Lawyer details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Lawyer"];
          };
        };
        /** @description Lawyer not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /**
       * Format: uuid
       * @description Unique identifier for the user
       */
      id?: string;
      /** @description Full name of the user */
      name?: string;
      /**
       * Format: email
       * @description User's email address
       */
      email?: string;
      /**
       * @description User's role in the system
       * @default user
       * @enum {string}
       */
      role: "user" | "admin" | "lawyer";
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /**
       * @description Whether the user account is active
       * @default true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Timestamp of last login
       */
      lastLogin?: string | null;
    };
    AuthResponse: {
      user?: components["schemas"]["User"];
      /** @description JWT access token */
      token?: string;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error?: {
        message?: string;
        code?: string | null;
      };
    };
    Chat: {
      /**
       * Format: uuid
       * @description Unique identifier for the chat
       */
      id?: string;
      /** @description Title of the chat */
      title?: string;
      /**
       * Format: uuid
       * @description ID of the user who owns the chat
       */
      userId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Message: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      chatId?: string;
      /** @enum {string} */
      role?: "user" | "assistant" | "system";
      content?: string;
      metadata?: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      createdAt?: string;
    };
    CreateChatRequest: {
      /** @example Legal Consultation about Property */
      title: string;
    };
    SendMessageRequest: {
      /** @example What are my rights as a tenant? */
      content: string;
    };
    CreateUserRequest: {
      /**
       * Format: email
       * @example user@example.com
       */
      email: string;
      /** @example John Doe */
      name: string;
      /**
       * Format: password
       * @example securePassword123
       */
      password: string;
      /**
       * @default user
       * @example user
       * @enum {string}
       */
      role: "user" | "admin" | "lawyer";
    };
    Question: {
      /**
       * Format: uuid
       * @description Unique identifier for the question
       */
      id?: string;
      /** @description The actual question text */
      content?: string;
      /**
       * @description Legal category of the question
       * @example Family Law
       */
      category?: string;
      /**
       * @default pending
       * @enum {string}
       */
      status: "pending" | "processing" | "answered" | "closed";
      /**
       * Format: uuid
       * @description ID of the user who asked the question
       */
      userId?: string;
      /**
       * Format: uuid
       * @description ID of the lawyer assigned to answer
       */
      lawyerId?: string | null;
      /** @description The provided answer to the question */
      answer?: string | null;
      /** @description Additional metadata about the question */
      metadata?: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CreateQuestionRequest: {
      /** @example What are my rights if my landlord wants to evict me? */
      content: string;
      /** @example Housing Law */
      category: string;
      /**
       * @example {
       *       "urgency": "high",
       *       "relatedCaseNumber": "CASE123"
       *     }
       */
      metadata?: {
        [key: string]: unknown;
      };
    };
    ProcessQuestionRequest: {
      /**
       * Format: uuid
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      lawyerId: string;
      /**
       * @default medium
       * @enum {string}
       */
      priority: "low" | "medium" | "high" | "urgent";
    };
    Lawyer: {
      /**
       * Format: uuid
       * @description Unique identifier for the lawyer
       */
      id?: string;
      /**
       * Format: email
       * @description Lawyer's email address
       */
      email?: string;
      /** @description Full name of the lawyer */
      name?: string;
      /** @description Contact phone number */
      phone?: string;
      /** @description Legal specialization area */
      specialization?: string;
      /** @description Years of experience */
      experience?: number;
      /** @description Bar association registration number */
      barNumber?: string;
      /**
       * @description Whether the lawyer's credentials have been verified
       * @default false
       */
      isVerified: boolean;
      /** @description Languages spoken by the lawyer */
      languages?: string[];
      /** @description Professional biography */
      bio?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CreateLawyerRequest: {
      /**
       * Format: email
       * @example lawyer@example.com
       */
      email: string;
      /** @example John Doe */
      name: string;
      /** @example +1234567890 */
      phone?: string;
      /** @example Family Law */
      specialization?: string;
      /** @example 5 */
      experience?: number;
      /** @example BAR12345 */
      barNumber: string;
      /**
       * @example [
       *       "English",
       *       "French"
       *     ]
       */
      languages?: string[];
      /** @example Experienced family law attorney with 5+ years of practice */
      bio?: string;
    };
    UpdateLawyerRequest: {
      /** @example +1234567890 */
      phone?: string;
      /** @example Corporate Law */
      specialization?: string;
      /** @example 7 */
      experience?: number;
      /**
       * @example [
       *       "English",
       *       "French",
       *       "Spanish"
       *     ]
       */
      languages?: string[];
      /** @example Updated bio with more experience */
      bio?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
